import { 
  LayoutDashboard, 
  Wrench, 
  CreditCard, 
  Users, 
  HelpCircle, 
  MessageSquare,
  LogOut,
  Brain,
  Settings,
  User,
  Bell,
  ChevronLeft,
  ChevronRight
} from "lucide-react";
import { NavLink, useLocation } from "react-router-dom";
import { useState, useEffect } from "react";
import { Button } from "../ui/button";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../ui/alert-dialog";

const navigationItems = [
  { title: "Dashboard", url: "/dashboard", icon: LayoutDashboard },
  { title: "Tools & Workspace", url: "/tools", icon: Wrench },
  { title: "Subscription", url: "/subscription", icon: CreditCard },
  { title: "Team", url: "/team", icon: Users },
  { title: "Help & Support", url: "/help", icon: HelpCircle },
  { title: "Feedback", url: "/feedback", icon: MessageSquare },
];

const userMenuItems = [
  { title: "Profile", url: "/profile", icon: User },
  { title: "Settings", url: "/settings", icon: Settings },
  { title: "Notifications", url: "/notifications", icon: Bell },
];

export function AppSidebar() {
  const location = useLocation();
  const currentPath = location.pathname;
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [showLogoutDialog, setShowLogoutDialog] = useState(false);

  const isActive = (path: string) => currentPath === path;

  // Listen for toggle events from navbar
  useEffect(() => {
    const handleToggle = () => {
      toggleSidebar();
    };

    window.addEventListener('toggleSidebar', handleToggle);
    return () => {
      window.removeEventListener('toggleSidebar', handleToggle);
    };
  }, [isCollapsed]);

  const handleLogout = () => {
    console.log("Logging out...");
    setShowLogoutDialog(false);
    window.location.href = "/";
  };

  const toggleSidebar = () => {
    const newCollapsedState = !isCollapsed;
    setIsCollapsed(newCollapsedState);
    
    // Dispatch custom event to notify layout
    window.dispatchEvent(new CustomEvent('sidebarToggle', {
      detail: { collapsed: newCollapsedState }
    }));
  };

  return (
    <div 
      // hidden sm:flex
      className={` 
      fixed left-0 top-0 h-screen z-40 transition-all duration-300 ease-in-out
      z-100
      ${isCollapsed ? "hidden sm:block sm:w-16" : "sm:w-64"}
      bg-sidebar border-r border-sidebar-border shadow-lg
      flex flex-col
    `}>
      {/* Header */}
      <div className="p-4 border-b border-sidebar-border bg-sidebar-accent/5">
        <div className="flex items-center justify-between">
          {!isCollapsed && (
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-primary rounded-lg">
                <Brain className="h-6 w-6 text-primary-foreground" />
              </div>
              <h1 className="text-xl font-bold text-sidebar-foreground">Enzol</h1>
            </div>
          )}
          {isCollapsed && (
            <div className="p-2 bg-primary rounded-lg mx-auto">
              <Brain className="h-6 w-6 text-primary-foreground" />
            </div>
          )}
          <button
            onClick={toggleSidebar}
            className="text-sidebar-muted hover:text-sidebar-foreground hover:bg-sidebar-accent h-8 w-8 rounded flex items-center justify-center transition-colors"
          >
            {isCollapsed ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
          </button>
        </div>
      </div>

      {/* Navigation - scrollable area */}
      <div className="flex-1 overflow-y-auto p-4 space-y-6 sidebar-scrollbar sidebar-scrollbar-sec-testing">
        {/* Main Navigation */}
        <div>
          {!isCollapsed && (
            <h2 className="text-xs font-semibold text-sidebar-muted uppercase tracking-wider mb-3">
              {/* Navigation */}
            </h2>
          )}
          <nav className="space-y-1">
            {navigationItems.map((item) => (
              <NavLink
                key={item.title}
                to={item.url}
                className={({ isActive }) => `
                  flex items-center gap-3 px-3 py-3 rounded-lg transition-all duration-200
                  ${isActive
                    ? "bg-sidebar-accent text-sidebar-accent-foreground border border-sidebar-accent/50"
                    : "text-sidebar-muted hover:text-sidebar-foreground hover:bg-sidebar-accent/50"
                  }
                  ${isCollapsed ? "justify-center" : ""}
                `}
              >
                <item.icon className={`h-5 w-5 ${isActive(item.url) ? "text-primary" : ""}`} />
                {!isCollapsed && (
                  <span className="font-medium">{item.title}</span>
                )}
                {isActive(item.url) && !isCollapsed && (
                  <div className="ml-auto w-2 h-2 bg-primary rounded-full" />
                )}
              </NavLink>
            ))}
          </nav>
        </div>

        {/* Account Section */}
        {!isCollapsed && (
          <div>
            <h2 className="text-xs font-semibold text-sidebar-muted uppercase tracking-wider mb-3">
              Account
            </h2>
            <nav className="space-y-1">
              {userMenuItems.map((item) => (
                <NavLink
                  key={item.title}
                  to={item.url}
                  className={({ isActive }) => `
                    flex items-center gap-3 px-3 py-3 rounded-lg transition-all duration-200
                    ${isActive
                      ? "bg-sidebar-accent text-sidebar-accent-foreground border border-sidebar-accent/50"
                      : "text-sidebar-muted hover:text-sidebar-foreground hover:bg-sidebar-accent/50"
                    }
                  `}
                >
                  <item.icon className={`h-4 w-4 ${isActive(item.url) ? "text-primary" : ""}`} />
                  <span className="font-medium">{item.title}</span>
                  {isActive(item.url) && (
                    <div className="ml-auto w-2 h-2 bg-primary rounded-full" />
                  )}
                </NavLink>
              ))}
            </nav>
          </div>
        )}
      </div>

      {/* Footer with Logout */}
      <div className="p-4 border-t border-sidebar-border bg-sidebar-accent/5">
        <AlertDialog open={showLogoutDialog} onOpenChange={setShowLogoutDialog}>
          <AlertDialogTrigger asChild>
            <button
              className={`
                w-full ${isCollapsed ? "justify-center px-3" : "justify-start px-3"} 
                py-3 text-destructive hover:text-destructive-foreground hover:bg-destructive/10
                rounded-lg transition-all duration-200 flex items-center
              `}
            >
              <LogOut className="h-5 w-5" />
              {!isCollapsed && (
                <span className="ml-3 font-medium">Logout</span>
              )}
            </button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Confirm Logout</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to logout? You'll need to sign in again to access your account.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={handleLogout}>
                Logout
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  );
}












      <div className="mx-auto max-w-7xl px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          {/* Logo */}
          <div className="flex items-center">
            <Link to="/" className="flex items-center space-x-2">
              <div className="relative">
                <Brain className="h-8 w-8 text-primary" />
                <div className="absolute inset-0 text-primary opacity-50 blur-sm">
                  <Brain className="h-8 w-8" />
                </div>
              </div>
              <span className="text-xl font-bold text-glow">Enzol</span>
            </Link>
          </div>

          {/* Mobile menu button */}
          <div className="md:hidden">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            >
              {mobileMenuOpen ? (
                <X className="h-6 w-6" />
              ) : (
                <Menu className="h-6 w-6" />
              )}
            </Button>
          </div>
        </div>

        {/* Mobile menu */}
        {mobileMenuOpen && (
          <div className="md:hidden">
            <div className="px-2 pt-2 pb-3 space-y-1 glass-card mt-4">
              {navigation.map((item) => (
                <div key={item.name}>
                  {item.dropdown ? (
                    <div>
                      <div className="block px-3 py-2 text-base font-medium text-foreground">
                        {item.name}
                      </div>
                      {item.dropdown.map((subItem) => (
                        <Link
                          key={subItem.name}
                          to={subItem.href}
                          className={cn(
                            "block px-6 py-2 text-sm transition-smooth",
                            isActive(subItem.href) 
                              ? "text-primary font-medium" 
                              : "text-muted-foreground hover:text-primary"
                          )}
                          onClick={() => setMobileMenuOpen(false)}
                        >
                          {subItem.name}
                        </Link>
                      ))}
                    </div>
                  ) : (
                    <Link
                      to={item.href}
                      className={cn(
                        "block px-3 py-2 text-base font-medium transition-smooth",
                        isActive(item.href) 
                          ? "text-primary font-medium" 
                          : "text-foreground hover:text-primary"
                      )}
                      onClick={() => setMobileMenuOpen(false)}
                    >
                      {item.name}
                    </Link>
                  )}
                </div>
              ))}
              
              <div className="pt-4 space-y-2">
                <Link to="/signin" onClick={() => setMobileMenuOpen(false)}>
                  <Button variant="ghost" className="w-full">
                    Sign In
                  </Button>
                </Link>
                <Link to="/signup" onClick={() => setMobileMenuOpen(false)}>
                  <Button variant="primary" className="w-full glow-primary">
                    Get Started
                  </Button>
                </Link>
              </div>
            </div>
          </div>
        )}
      </div>